# 5_visualization_generic/3_2_plot_surface_tscore.py

from pathlib import Path
import json
import numpy as np
import pandas as pd
from nilearn import datasets, surface
from nilearn.image import load_img, new_img_like
from nilearn.plotting import view_surf

from config import ATLAS_PATH, ALPHA, stage_artifacts

# ------------------------ Folders ------------------------
ART_STAT = stage_artifacts("5_visualization") / "surfaces_roi_t" / "edge_ttests_fdr"
VIS_DIR  = stage_artifacts("5_visualization") / "surfaces_roi_t" / "visualization"
VIS_DIR.mkdir(parents=True, exist_ok=True)

# ------------------------ Inputs ------------------------
EDGES_SIG_CSV = ART_STAT / "edges_significant.csv"   # generated by compute_edge_ttests_fdr.py
NROIS_TXT     = ART_STAT / "n_rois.txt"

# ------------------------ Display config ------------------------
THRESHOLD_VIEW = 1.5
AGGREGATOR     = "mean"  # (kept for clarity; only 'mean' implemented)


# ------------------------ Utilities ------------------------
def build_volume_from_roi_vector(atlas_img, roi_vals: np.ndarray):
    """Paint a scalar value per ROI (1..n) into a 3D volume matching atlas_img."""
    arr = atlas_img.get_fdata().astype(int)
    vol = np.zeros_like(arr, dtype=np.float32)
    for i, val in enumerate(roi_vals, start=1):
        vol[arr == i] = val
    return new_img_like(atlas_img, vol, copy_header=True)


def write_surface_html(fs, key: str, title: str, img, vmax: float) -> Path:
    """Project a volume to fsaverage pial, render LH/RH viewers, and write a side-by-side HTML."""
    tex_l = surface.vol_to_surf(img, fs.pial_left,  interpolation="linear")
    tex_r = surface.vol_to_surf(img, fs.pial_right, interpolation="linear")

    common = dict(
        threshold=THRESHOLD_VIEW,
        vmin=-vmax, vmax=vmax,
        symmetric_cmap=True,
        cmap="cold_hot",
        bg_on_data=True,
    )

    vL = view_surf(
        fs.infl_left, tex_l,
        bg_map=fs.sulc_left, colorbar=True, title=title + " — LH", **common
    )
    vR = view_surf(
        fs.infl_right, tex_r,
        bg_map=fs.sulc_right, colorbar=False, title=title + " — RH", **common
    )

    out_html = VIS_DIR / f"surf_{key}.html"
    html = f"""<!doctype html><meta charset="utf-8">
    <div style="display:flex;gap:10px">
      <div style="flex:1">{vL._repr_html_()}</div>
      <div style="flex:1">{vR._repr_html_()}</div>
    </div>"""
    out_html.write_text(html, encoding="utf-8")
    return out_html


def roi_t_mean(df_edges: pd.DataFrame, n_rois: int) -> np.ndarray:
    """Mean signed t per ROI over (already filtered) incident edges."""
    buckets = [[] for _ in range(n_rois)]
    if not df_edges.empty:
        i = df_edges["roi_i"].to_numpy(int) - 1
        j = df_edges["roi_j"].to_numpy(int) - 1
        t = df_edges["tval"].to_numpy(float)
        for a, b, tv in zip(i, j, t):
            if 0 <= a < n_rois: buckets[a].append(tv)
            if 0 <= b < n_rois: buckets[b].append(tv)
    out = np.zeros(n_rois, dtype=np.float32)
    for r in range(n_rois):
        v = np.asarray(buckets[r], dtype=float)
        out[r] = 0.0 if v.size == 0 else float(np.mean(v))
    return out


def slug(s: str) -> str:
    """Filename-friendly key."""
    return (s.replace("/", "-").replace("–", "-").replace("—", "-")
             .replace(" ", "_").replace("↔", "_x_"))[:120]


# ------------------------ Main ------------------------
def main():
    assert EDGES_SIG_CSV.exists(), f"Not found: {EDGES_SIG_CSV}"
    assert NROIS_TXT.exists(), f"Not found: {NROIS_TXT}"

    n_rois = int(Path(NROIS_TXT).read_text().strip())
    df = pd.read_csv(EDGES_SIG_CSV)

    # Required Yeo-7 columns
    needed = {"roi_i","roi_j","tval","p_fdr","yeo7_i_name","yeo7_j_name","yeo7_pair","yeo7_kind"}
    miss = needed - set(df.columns)
    assert not miss, f"Missing columns in {EDGES_SIG_CSV.name}: {miss}"

    atlas_img = load_img(str(ATLAS_PATH))
    fs = datasets.fetch_surf_fsaverage(mesh="fsaverage")

    pages = []  # (scale, kind, label, filename, n_edges)

    # --- ALL (all significant edges, FDR < alpha) → ROI t = mean(t of incident edges) ---
    t_roi_all = roi_t_mean(df, n_rois)
    vmax_all = float(max(np.nanmax(np.abs(t_roi_all)), 1e-6))
    img_all = build_volume_from_roi_vector(atlas_img, t_roi_all)
    f_all = write_surface_html(fs, "ALL_roiT_mean", f"ROI t (mean) — all Yeo7 — FDR<{ALPHA}", img_all, vmax_all)
    pages.append(("all", "all", "All significant", f_all.name, int(df.shape[0])))

    # ------------------------ Yeo-7 ------------------------
    df7 = df[["roi_i","roi_j","tval","yeo7_i_name","yeo7_j_name","yeo7_pair","yeo7_kind"]].copy()

    # INTRA (single network)
    nets7 = sorted(df7.loc[df7["yeo7_kind"] == "intra", "yeo7_i_name"].dropna().unique())
    for net in nets7:
        sub = df7[(df7["yeo7_kind"] == "intra") & (df7["yeo7_i_name"] == net) & (df7["yeo7_j_name"] == net)]
        if sub.empty:
            continue
        t_roi = roi_t_mean(sub, n_rois)
        vmax = float(max(np.nanmax(np.abs(t_roi)), 1e-6))
        img = build_volume_from_roi_vector(atlas_img, t_roi)
        key = f"yeo7_intra_{slug(net)}_roiT_mean"
        ttl = f"Yeo7 intra — {net} — ROI t (mean) — FDR<{ALPHA}"
        f = write_surface_html(fs, key, ttl, img, vmax)
        pages.append(("yeo7", "intra", net, f.name, int(sub.shape[0])))

    # INTER (pairs)
    pairs7 = sorted(df7.loc[df7["yeo7_kind"] == "inter", "yeo7_pair"].dropna().unique())
    for pair in pairs7:
        a, b = pair.split(" ↔ ")
        if a == b:
            continue  # inter only
        sub = df7[(df7["yeo7_kind"] == "inter") & (df7["yeo7_pair"] == pair)]
        if sub.empty:
            continue
        t_roi = roi_t_mean(sub, n_rois)
        vmax = float(max(np.nanmax(np.abs(t_roi)), 1e-6))
        img = build_volume_from_roi_vector(atlas_img, t_roi)
        key = f"yeo7_inter_{slug(pair)}_roiT_mean"
        ttl = f"Yeo7 inter — {pair} — ROI t (mean) — FDR<{ALPHA}"
        f = write_surface_html(fs, key, ttl, img, vmax)
        pages.append(("yeo7", "inter", pair, f.name, int(sub.shape[0])))

    # ------------------------ Index HTML (All + Yeo-7) ------------------------
    # Build dictionaries "label → file" for the two Yeo-7 types
    yeo7_intra = {f"{lab} ({n} edges)": file for (sc, kd, lab, file, n) in pages if sc == "yeo7" and kd == "intra"}
    yeo7_inter = {f"{lab} ({n} edges)": file for (sc, kd, lab, file, n) in pages if sc == "yeo7" and kd == "inter"}

    # Default selection: intra if available, else inter, else ALL
    def first_value(d):
        return next(iter(d.values())) if d else None

    default_kind = "intra" if yeo7_intra else ("inter" if yeo7_inter else "all")
    default_src = (first_value(yeo7_intra)
                   or first_value(yeo7_inter)
                   or "surf_ALL_roiT_mean.html")

    index_html = VIS_DIR / "index.html"
    html = f"""<!doctype html>
<meta charset="utf-8">
<title>Surface — ROI t (mean) on significant edges (FDR &lt; {ALPHA}) — Yeo-7</title>
<style>
  body {{ font-family: system-ui, sans-serif; margin: 16px; }}
  .controls {{ display:flex; gap:12px; align-items:center; flex-wrap:wrap; margin-bottom:12px; }}
  select {{ padding:6px 8px; border-radius:6px; }}
  iframe {{ width:100%; height:80vh; border:1px solid #ccc; border-radius:8px; }}
</style>
<h2 style="margin:0 0 12px 0;">ROI t (mean) on significant edges (FDR &lt; {ALPHA}) — Yeo-7 filter</h2>

<div class="controls">
  <label><strong>Type:</strong></label>
  <select id="kind" onchange="sync()">
    <option value="intra" {"selected" if default_kind=="intra" else ""}>intra</option>
    <option value="inter" {"selected" if default_kind=="inter" else ""}>inter</option>
  </select>

  <label><strong>Connection:</strong></label>
  <select id="pair" onchange="upd()"></select>
</div>

<iframe id="frame" src="{default_src}" loading="lazy"></iframe>

<script>
const yeo7_intra = {json.dumps(yeo7_intra, ensure_ascii=False)};
const yeo7_inter = {json.dumps(yeo7_inter, ensure_ascii=False)};

function clear(sel) {{
  while (sel.firstChild) sel.removeChild(sel.firstChild);
}}
function fillOptions(obj) {{
  const sel = document.getElementById('pair');
  clear(sel);
  // Optionally include "All significant" at top
  const allOpt = document.createElement('option');
  allOpt.value = "surf_ALL_roiT_mean.html";
  allOpt.textContent = "All significant";
  sel.appendChild(allOpt);

  for (const [k,v] of Object.entries(obj)) {{
    const o = document.createElement('option');
    o.value = v; o.textContent = k; sel.appendChild(o);
  }}
}}
function sync() {{
  const kd = document.getElementById('kind').value; // 'intra' or 'inter'
  fillOptions(kd === 'intra' ? yeo7_intra : yeo7_inter);
  upd();
}}
function upd() {{
  const sel = document.getElementById('pair');
  const file = sel.value;
  if (file) document.getElementById('frame').src = file;
}}
sync();
</script>
"""
    index_html.write_text(html, encoding="utf-8")
    print(f"✓ Index (Yeo-7) → {index_html}")


if __name__ == "__main__":
    main()
